1) Como a visualização de um diff entre duas versões de um arquivo ajuda você a ver o bug que foi introduzido?

Ao usar o diff, as linhas diferentes são indicadas por '-' e '+', significando, respectivamente, as que foram removidas e acrescentadas no texto. Prestando atenção nestes sinais, é possível focar nas alterações e possíveis erros introduzidos pela digitação.

---------------------------------------------------------------------------------------
2) Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

Se forem inseridos erros, bugs, etc na versão atual, é possível dar rollback numa versão antiga, obtendo assim uma versão estável na qual se possa trabalhar, e tentar codificar uma solução novamente.

---------------------------------------------------------------------------------------
3) Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?

Escolher manualmente:
Prós: maior controle das alterações
Contras: pode ser mais suscetível à faltas de luz, por ex, se o commit demorar muito.

Automático:
Prós: não depende da interferência do usuário, portanto não é suscetível à falhas dele.
Contras: definir o intervalo adequado é difícil.

---------------------------------------------------------------------------------------
4) Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

Porque fica mais fácil mapear alterações lógicas.

---------------------------------------------------------------------------------------
5) Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

Com o 'git log', você identifica quais os commits foram feitos, suas ids, data, autor e comentários. Com o 'git diff', você pode comparar 2 ids de commits para ver as diferenças textuais.

---------------------------------------------------------------------------------------
6) De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?

Usando o comando 'git checkout', podemos voltar a versão do código para uma versão anterior (ou posterior, se soubermos a ID), para fazer alguma verificação (no caso explorado, ver qual versão introduziu um bug).

---------------------------------------------------------------------------------------
7) Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

- Para fazer projetos no Doom
- Para fazer um trabalho da faculdade.



Comandos:
git clone - copia um repositório para a máquina local
git log - histórico de alterações num arquivo
git diff - diferenças entre versões de um mesmo arquivo
git checkout - reverte a uma versão anterior (ou posterior) do arquivo
